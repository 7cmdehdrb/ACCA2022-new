<?xml version="1.0" encoding="UTF-8"?>
<launch>

    <arg name="camera" default="/usb_cam" />

    <!-- rosbag play -->



    <include file="$(find adaptive_clustering)/launch/adaptive_clustering.launch"/>


    <!-- <include file="$(find darknet_ros)/launch/yolo_v4.launch"/> -->


    <!-- Nodelet manager for this pipeline -->
    <node
        pkg="nodelet"
        type="nodelet"
        args="manager"
        name="lidar_camera_manager"
        output="screen" />

    <node
        pkg="image_proc"
        type="image_proc" 
        name="image_proc_node1" />

    <!-- Run image_proc/rectify nodelet -->
    <node
        pkg="nodelet"
        type="nodelet"
        name="rectify_color"
        args="load image_proc/rectify lidar_camera_manager --no-bond" >
        
        <!-- Remap input topics -->
        <remap from="image_mono" to="$(arg camera)/image_raw" />
        <remap from="camera_info" to="$(arg camera)/camera_info" />

        <!-- Remap output topics -->
        <remap from="image_rect" to="$(arg camera)/image_rect_color" />
    </node>

    <!-- Wire static transform from the world to velodyne frame -->
    <node
        pkg="tf2_ros"
        type="static_transform_publisher"
        name="baselink_velodyne"
        args="0 0 0 0 0 0 base_link velodyne"/>

    <node
        pkg="tf2_ros"
        type="static_transform_publisher"
        name="baselink_world"
        args="-0.0152686 0.022395 -0.400532 -1.52919 -0.024599 -1.5875 base_link world"/>

    <node
        pkg="tf2_ros"
        type="static_transform_publisher"
        name="baselink_camera"
        args="0 0 0 0 0 0 world camera"/>

    <!-- <node
        pkg="tf2_ros"
        type="static_transform_publisher" 
        name="world_velodyne" 
        args="-0.10018178 -0.12812744 -0.32075784 2.665484683990711 -1.5299434194456225 -1.092603131865717 world velodyne" /> -->


    <!-- Setup params for Camera-LiDAR calibration script -->
    <param name="camera_info_topic" type="str" value="$(arg camera)/camera_info" />
    <param name="image_color_topic" type="str" value="$(arg camera)/image_rect_color" />
    <param name="velodyne_points_topic" type="str" value="/adaptive_clustering/cloud_filtered" />
    <param name="camera_lidar_topic" type="str" value="$(arg camera)/camera_lidar" />
    <param name="lidar_clustering_topic" type="str" value="/adaptive_clustering/markers" />
    <param name="yolo_box_topic" type="str" value="/darknet_ros/bounding_boxes" />


    <!-- Run Camera-LiDAR projection script -->
    <node   
        pkg="lidar_camera_calibration"
        type="yolonum.py"
        name="calibrate_camera_lidar"
        output="screen" />

    <!-- Run image view to display the projected points image -->
    <node 
        name="camera_lidar_projection" 
        pkg="image_view"
        type="image_view"
        respawn="false"
        output="screen">
        
        <!-- Remap input topics -->
        <remap from="image" to="$(arg camera)/camera_lidar" />
    </node>

    <!-- true or false yolo data -->
    <!-- <node
        pkg="lidar_camera_calibration"
        type="yolo_falsedata.py" 
        name="yolo_falsedata" /> -->

    <include file="$(find transform_point_cloud)/launch/demo.launch"/>


    <node
        pkg="adaptive_clustering"
        type="after_clustering"
        name="after_clustering"/>   


    <!-- <node
        pkg="lidar_camera_calibration"
        type="nearmarker.py"
        name="nearmarker"/>    -->

</launch>

<!-- 1080x720 -->
<!-- 
0.68262956 0.1834501 0.08029958 0.08392293 -0.20009139 -0.97617641 -->



<!-- 640x480 -->
<!-- 
Euler angles (RPY): (-1.092603131865717, -1.5299434194456225, 2.665484683990711)
Rotation Matrix: [[-0.03629937 -0.99933944  0.00174397]
 [ 0.01871864 -0.00242474 -0.99982185]
 [ 0.99916564 -0.03626026  0.01879429]]
Translation Offsets: [[-0.10018178 -0.12812744 -0.32075784]] -->